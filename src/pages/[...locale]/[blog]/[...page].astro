---
import type { GetStaticPaths } from "astro";
import DefaultLayout from "../../../layouts/DefaultLayout.astro";
import { parseLocale, useTranslations } from "../../../utils/i18n";
import SinglePaneContent from "../../../layouts/sections/SinglePaneContent.astro";
import CardList from "../../../components/CardList.astro";
import Pagination from "../../../components/Pagination.astro";
import { getCollection } from "astro:content";
import { i18nPropsAndParams } from "astro-loader-i18n";
import { defaultPropsAndParamsOptions, resolvePath } from "../../../utils/paths";
import { C } from "../../../configuration";
import PostCard from "../../../components/PostCard.astro";

export const getStaticPaths = (async ({ paginate }) => {
  const routePattern = "[...locale]/[blog]/[...slug]";
  const collection = await getCollection("blog");

  const propsAndParams = i18nPropsAndParams(collection, {
    ...defaultPropsAndParamsOptions,
    routePattern,
  });

  const locales = propsAndParams.reduce(
    (acc, item) => {
      acc[item.props.data.locale] = item.params.locale;
      return acc;
    },
    {} as Record<string, string | undefined>,
  );

  return Object.entries(locales).flatMap(
    ([propsLocale, paramsLocale]) => {
      const items = propsAndParams.filter(
        (item) => item.props.data.locale === propsLocale,
      );
      const data = items.map((item) => ({
        ...item.props.data,
        translatedPath: item.props.translatedPath,
      }));
      const blog = items[0]?.params.blog;
      const translations = Object.entries(locales).reduce(
        (acc, [locale, slug]) => {
          acc[locale] = resolvePath(slug, blog);
          return acc;
        },
        {} as Record<string, string>,
      );
      return paginate(data, {
        pageSize: C.SETTINGS.BLOG.PAGE_SIZE,
        props: {
          locale: propsLocale,
          translations,
        },
        params: {
          locale: paramsLocale,
          blog,
        },
      });
    },
  );
}) satisfies GetStaticPaths;

const { page, locale, translations } = Astro.props;
const t = useTranslations(parseLocale(locale));
---

<style>
  :global(.vertical) {
    display: flex;
    flex-direction: column;
    gap: 1.4rem;
    margin: 1.4rem 0 !important;
  }
</style>

<DefaultLayout translations={translations}>
  <SinglePaneContent>
    <h1>{t("pages.blog")}</h1>
    <Pagination page={page} />
    <CardList classNames="vertical">
      {
        page.data.map(async (post) => (
          <li>
            <PostCard
              title={post.title}
              cover={post.cover}
              publishedAt={post.publishedAt}
              locale={post.locale}
              translatedPath={post.translatedPath}
            />
          </li>
        ))
      }
    </CardList>
    <Pagination page={page} />
  </SinglePaneContent>
</DefaultLayout>
